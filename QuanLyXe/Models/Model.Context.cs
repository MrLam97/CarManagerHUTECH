//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyXe.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QUANLYXEEntities : DbContext
    {
        public QUANLYXEEntities()
            : base("name=QUANLYXEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CHITIETPHANCONG> CHITIETPHANCONGs { get; set; }
        public virtual DbSet<CHITIETSUACHUA> CHITIETSUACHUAs { get; set; }
        public virtual DbSet<CHUCVU> CHUCVUs { get; set; }
        public virtual DbSet<DATXE> DATXEs { get; set; }
        public virtual DbSet<KHOA> KHOAs { get; set; }
        public virtual DbSet<LOAIXE> LOAIXEs { get; set; }
        public virtual DbSet<PHANCONG> PHANCONGs { get; set; }
        public virtual DbSet<PHIKHAC> PHIKHACs { get; set; }
        public virtual DbSet<SUACHUA> SUACHUAs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TAIXE> TAIXEs { get; set; }
        public virtual DbSet<THONGKETHANG> THONGKETHANGs { get; set; }
        public virtual DbSet<TINHTRANGXE> TINHTRANGXEs { get; set; }
        public virtual DbSet<TRANGTHAIXE> TRANGTHAIXEs { get; set; }
        public virtual DbSet<USER> USERS { get; set; }
        public virtual DbSet<XANGLOP> XANGLOPs { get; set; }
        public virtual DbSet<XE> XEs { get; set; }
        public virtual DbSet<Phancongtx> Phancongtxes { get; set; }
        public virtual DbSet<ThongtinDatxe> ThongtinDatxes { get; set; }
        public virtual DbSet<Thongtinxe> Thongtinxes { get; set; }
        public virtual DbSet<v_DatxeTaixe> v_DatxeTaixe { get; set; }
        public virtual DbSet<v_Suachua> v_Suachua { get; set; }
        public virtual DbSet<v_Taikhoan> v_Taikhoan { get; set; }
        public virtual DbSet<PHANQUYEN> PHANQUYENs { get; set; }
        public virtual DbSet<QUYENHAN> QUYENHANs { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_Quyenuserksd_Result> sp_Quyenuserksd(string tendn)
        {
            var tendnParameter = tendn != null ?
                new ObjectParameter("tendn", tendn) :
                new ObjectParameter("tendn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Quyenuserksd_Result>("sp_Quyenuserksd", tendnParameter);
        }
    
        public virtual ObjectResult<sp_Quyenusersd_Result> sp_Quyenusersd(string tendn)
        {
            var tendnParameter = tendn != null ?
                new ObjectParameter("tendn", tendn) :
                new ObjectParameter("tendn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Quyenusersd_Result>("sp_Quyenusersd", tendnParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_TKChuyendi_Result> sp_TKChuyendi(Nullable<int> thang, Nullable<int> nam, Nullable<int> maxe)
        {
            var thangParameter = thang.HasValue ?
                new ObjectParameter("thang", thang) :
                new ObjectParameter("thang", typeof(int));
    
            var namParameter = nam.HasValue ?
                new ObjectParameter("nam", nam) :
                new ObjectParameter("nam", typeof(int));
    
            var maxeParameter = maxe.HasValue ?
                new ObjectParameter("maxe", maxe) :
                new ObjectParameter("maxe", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TKChuyendi_Result>("sp_TKChuyendi", thangParameter, namParameter, maxeParameter);
        }
    
        public virtual ObjectResult<sp_TKThang_Result> sp_TKThang(Nullable<int> thang, Nullable<int> nam, Nullable<int> maxe)
        {
            var thangParameter = thang.HasValue ?
                new ObjectParameter("thang", thang) :
                new ObjectParameter("thang", typeof(int));
    
            var namParameter = nam.HasValue ?
                new ObjectParameter("nam", nam) :
                new ObjectParameter("nam", typeof(int));
    
            var maxeParameter = maxe.HasValue ?
                new ObjectParameter("maxe", maxe) :
                new ObjectParameter("maxe", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TKThang_Result>("sp_TKThang", thangParameter, namParameter, maxeParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_Xechuadat_Result> sp_Xechuadat(Nullable<System.DateTime> ngay, Nullable<System.DateTime> ngayve)
        {
            var ngayParameter = ngay.HasValue ?
                new ObjectParameter("Ngay", ngay) :
                new ObjectParameter("Ngay", typeof(System.DateTime));
    
            var ngayveParameter = ngayve.HasValue ?
                new ObjectParameter("Ngayve", ngayve) :
                new ObjectParameter("Ngayve", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Xechuadat_Result>("sp_Xechuadat", ngayParameter, ngayveParameter);
        }
    
        public virtual ObjectResult<sp_Xedadat_Result> sp_Xedadat(Nullable<System.DateTime> ngay, Nullable<System.DateTime> ngayve)
        {
            var ngayParameter = ngay.HasValue ?
                new ObjectParameter("Ngay", ngay) :
                new ObjectParameter("Ngay", typeof(System.DateTime));
    
            var ngayveParameter = ngayve.HasValue ?
                new ObjectParameter("Ngayve", ngayve) :
                new ObjectParameter("Ngayve", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Xedadat_Result>("sp_Xedadat", ngayParameter, ngayveParameter);
        }
    
        public virtual ObjectResult<spNgaylamtx_Result> spNgaylamtx(string tenttx)
        {
            var tenttxParameter = tenttx != null ?
                new ObjectParameter("Tenttx", tenttx) :
                new ObjectParameter("Tenttx", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNgaylamtx_Result>("spNgaylamtx", tenttxParameter);
        }
    
        public virtual ObjectResult<sp_CTTKThang_Result> sp_CTTKThang(Nullable<int> mAXE, Nullable<int> thang)
        {
            var mAXEParameter = mAXE.HasValue ?
                new ObjectParameter("MAXE", mAXE) :
                new ObjectParameter("MAXE", typeof(int));
    
            var thangParameter = thang.HasValue ?
                new ObjectParameter("Thang", thang) :
                new ObjectParameter("Thang", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CTTKThang_Result>("sp_CTTKThang", mAXEParameter, thangParameter);
        }
    }
}
